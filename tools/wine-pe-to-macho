#!/usr/bin/env python3
# pip3 install --global-option=--ninja lief
# ^ do that or the build takes forever

import argparse
import random
import shutil
import subprocess
import sys
import tempfile
from pathlib import Path
from typing import Callable

import lief


def run_cmd(*args, log: bool = False, **kwargs) -> subprocess.CompletedProcess:
    args = (*args,)
    if log:
        print(f"Running: {' '.join(map(str, args))}", file=sys.stderr)
    r = subprocess.run(list(map(str, args)), capture_output=True, **kwargs)
    if r.returncode != 0:
        sys.stderr.buffer.write(r.stdout)
        sys.stderr.buffer.write(r.stderr)
        raise subprocess.CalledProcessError(r.returncode, args, r.stdout, r.stderr)
    try:
        r.out = r.stdout.decode()
    except UnicodeDecodeError:
        pass
    return r


def gen_cmd(bin_name: str) -> Callable:
    bin_path = shutil.which(bin_name)
    assert bin_path is not None
    return lambda *args, **kwargs: run_cmd(bin_path, *args, **kwargs)


clang = gen_cmd("clang")


def real_main(args):
    with tempfile.NamedTemporaryFile() as tmp:
        clang(
            "-arch",
            "x86_64",
            "-o",
            tmp.name,
            "-x",
            "c",
            "/dev/null",
            "-shared",
            "-Wl,-no_adhoc_codesign",
        )
        for in_file in args.in_file:
            path = Path(in_file)
            if not path.exists():
                raise ValueError(f"input '{in_file}' doesn't exist")
            pe = lief.PE.parse(in_file)
            macho = lief.MachO.parse(tmp.name)[0]
            old_id_lc = next(
                lc
                for lc in macho.commands
                if type(lc) is lief.MachO.DylibCommand
                and lc.command == lief.MachO.LOAD_COMMAND_TYPES.ID_DYLIB
            )
            macho.remove(old_id_lc)
            new_id_lc = lief.MachO.DylibCommand.id_dylib(path.name + ".dylib")
            macho.add(new_id_lc)
            macho.uuid.uuid = list(random.randbytes(16))
            fs = macho.function_starts
            for f in pe.functions:
                fs.add_function(f.address)
            print(macho)
            macho.write(str(path) + ".dylib")


def get_arg_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="quartus_universal_patcher.py")
    parser.add_argument(
        "-i", "--in", dest="in_file", nargs="+", required=True, help="unpatched input file"
    )
    return parser


def main():
    real_main(get_arg_parser().parse_args())


if __name__ == "__main__":
    main()
